{"title":"UPWARD Analysis: Getting Started","markdown":{"yaml":{"title":"UPWARD Analysis: Getting Started","author":"Chris Mellinger","format":{"revealjs":{"smaller":true}},"editor":"source"},"headingText":"Possibly New Skill: Merging","containsRefs":false,"markdown":"\n\n\n```{r}\nknitr::opts_chunk$set(\n  echo = FALSE\n)\nlibrary(knitr)\nlibrary(tidyverse)\n```\n\nYou will need to merge UPWARD data.\n\nExample: PHQ-9 and demographics data come in two different tables. To analyze condition effects on the PHQ-9 by demographic characteristics, you need to know which PHQ-9 scores go with which demographic characteristics.\n\nCheck out the guide in the Master Methods Book online.\n\n## Toy Dataset {.smaller}\n\nConsider a researcher who collects data on people's pre-bed phone usage. Participants are asked what percentage of their pre-bedtime routine is spent looking at a phone on two different weeks. They also reported their average sleep quality.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r}\nd1 <- tribble(\n  ~rid,   ~ phone_perc,   ~time,\n  1,            45.5,           1,\n  1,            40.2,           2,\n  2,           36.6,            1,\n  2,            36.2,           2,\n  3,            38.9,           1,\n  3,            39.4,           2\n)\n\nkable(d1)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r}\nd2 <- tribble(\n  ~rid,   ~ sleep,\n  1,            \"high\",\n  2,            \"low\",\n  3,             \"high\",\n  4,             \"medium\"\n)\n\nkable(d2)\n```\n\n:::\n\n::::\n\n## Merging Toy Data\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\nThis code requires [Tidyverse](https://www.tidyverse.org/). If you don't have it, run:\n\n```{r, echo = T, eval=F}\ninstall.packages('tidyverse')\n```\n\nThen in each new R session:\n\n```{r, echo = T, eval=F}\nlibrary(tidyverse)\n```\n\nOur dataframes are called `d1` and `d2`. To merge, we do this:\n\n```{r, echo =T}\nd_merged_left = left_join(\n  d1,\n  d2,\n  by = \"rid\"\n)\n```\n\n:::\n\n::: {.column width=\"40%\"}\n\n```{r}\nkable(d_merged_left)\n```\n:::\n\n::::\n\n## The Ways We Can Merge\n\n:::: {.columns}\n\n:::{.column width=\"50%\"}\n\nThere are four tidyverse functions for merging:\n\n-   `inner_join()`: keeps only the rows that have matches\n-   `right_join()`: keeps everything from the \"right-hand\" table, only matches from the left-hand table.\n-   `left_join()`: reverse of `right_join()`\n-   `full_join()`: keeps all rows; fills in non-matching rows with `NA`\n\n:::\n\n::: {.column width=\"50%\"}\n\n![Join type illustrations](JoinTypes.webp)\n\n:::\n\n::::\n\n## Toy Dataset Example of Join Types\n\nRecall that our toy dataset included one person in `d2` that was not in `d1`.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r}\nkable(d1)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r}\nkable(d2)\n```\n\nPerson 4 is not in `d1`!\n\n:::\n\n::::\n\n## Toy Dataset Example of Join Types\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r, echo = T}\nd_full = full_join(\n  d1, d2,\n  by = \"rid\"\n)\n```\n\n```{r}\nkable(d_full)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r, echo=T}\nd_inner = inner_join(\n  d1, d2,\n  by = \"rid\"\n)\n```\n\n```{r}\nkable(d_inner)\n```\n\n:::\n\n::::\n\n## Toy Dataset Example of Join Types\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r, echo = T}\nd_left = left_join(\n  d1, d2,\n  by = \"rid\"\n)\n```\n\n```{r}\nkable(d_left)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r, echo=T}\nd_right = right_join(\n  d1, d2,\n  by = \"rid\"\n)\n```\n\n```{r}\nkable(d_right)\n```\n\n:::\n\n::::\n\n## Joining Advice\n\n- Just pick one and try it; it's hard to get right on the first attempt.\n- Always check the row counts of your dataframes.\n    - You can use `nrow()` or look at the environment pane.\n    - Count the number of unique things with e.g., `length(unique(d1$rid))` or `n_distinct(d2$rid)`\n- Always specify a `by` argument, even if it is obvious\n\n::: {.callout-tip}\n## For This Project\n\n`inner_join()` is probably a good place to start.\n:::\n\n## Coming Soon\n\nI will make resources for:\n\n- regression\n- within-participant analysis\n- moderation\n- mediation\n\nLinks will appear in the modules on Canvas, and I will email you when they are there.\n\n::: {.callout-tip}\n## Schedule Meetings with Me!\n\nI am more than willing to help you through sticking points. Just email so we can find a time.\n:::\n"},"formats":{"revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"UPWARDGettingStarted_V01.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.2.335","auto-stretch":true,"title":"UPWARD Analysis: Getting Started","author":"Chris Mellinger","editor":"source","smaller":true}}}}