{
  "hash": "5a67586b3660f8c2870897463a50a037",
  "result": {
    "markdown": "---\ntitle: \"UPWARD Analysis: Getting Started\"\nauthor: \"Chris Mellinger\"\nformat: \n  revealjs:\n    smaller: true\neditor: source\n---\n\n\n## Possibly New Skill: Merging\n\n\n::: {.cell}\n\n:::\n\n\nYou will need to merge UPWARD data.\n\nExample: PHQ-9 and demographics data come in two different tables. To analyze condition effects on the PHQ-9 by demographic characteristics, you need to know which PHQ-9 scores go with which demographic characteristics.\n\nCheck out the guide in the Master Methods Book online.\n\n## Toy Dataset {.smaller}\n\nConsider a researcher who collects data on people's pre-bed phone usage. Participants are asked what percentage of their pre-bedtime routine is spent looking at a phone on two different weeks. They also reported their average sleep quality.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n| rid| phone_perc| time|\n|---:|----------:|----:|\n|   1|       45.5|    1|\n|   1|       40.2|    2|\n|   2|       36.6|    1|\n|   2|       36.2|    2|\n|   3|       38.9|    1|\n|   3|       39.4|    2|\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n| rid|sleep  |\n|---:|:------|\n|   1|high   |\n|   2|low    |\n|   3|high   |\n|   4|medium |\n:::\n:::\n\n\n:::\n\n::::\n\n## Merging Toy Data\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\nThis code requires [Tidyverse](https://www.tidyverse.org/). If you don't have it, run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('tidyverse')\n```\n:::\n\n\nThen in each new R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nOur dataframes are called `d1` and `d2`. To merge, we do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_merged_left = left_join(\n  d1,\n  d2,\n  by = \"rid\"\n)\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n| rid| phone_perc| time|sleep |\n|---:|----------:|----:|:-----|\n|   1|       45.5|    1|high  |\n|   1|       40.2|    2|high  |\n|   2|       36.6|    1|low   |\n|   2|       36.2|    2|low   |\n|   3|       38.9|    1|high  |\n|   3|       39.4|    2|high  |\n:::\n:::\n\n:::\n\n::::\n\n## The Ways We Can Merge\n\n:::: {.columns}\n\n:::{.column width=\"50%\"}\n\nThere are four tidyverse functions for merging:\n\n-   `inner_join()`: keeps only the rows that have matches\n-   `right_join()`: keeps everything from the \"right-hand\" table, only matches from the left-hand table.\n-   `left_join()`: reverse of `right_join()`\n-   `full_join()`: keeps all rows; fills in non-matching rows with `NA`\n\n:::\n\n::: {.column width=\"50%\"}\n\n![Join type illustrations](JoinTypes.webp)\n\n:::\n\n::::\n\n## Toy Dataset Example of Join Types\n\nRecall that our toy dataset included one person in `d2` that was not in `d1`.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n| rid| phone_perc| time|\n|---:|----------:|----:|\n|   1|       45.5|    1|\n|   1|       40.2|    2|\n|   2|       36.6|    1|\n|   2|       36.2|    2|\n|   3|       38.9|    1|\n|   3|       39.4|    2|\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n| rid|sleep  |\n|---:|:------|\n|   1|high   |\n|   2|low    |\n|   3|high   |\n|   4|medium |\n:::\n:::\n\n\nPerson 4 is not in `d1`!\n\n:::\n\n::::\n\n## Toy Dataset Example of Join Types\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_full = full_join(\n  d1, d2,\n  by = \"rid\"\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n| rid| phone_perc| time|sleep  |\n|---:|----------:|----:|:------|\n|   1|       45.5|    1|high   |\n|   1|       40.2|    2|high   |\n|   2|       36.6|    1|low    |\n|   2|       36.2|    2|low    |\n|   3|       38.9|    1|high   |\n|   3|       39.4|    2|high   |\n|   4|         NA|   NA|medium |\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_inner = inner_join(\n  d1, d2,\n  by = \"rid\"\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n| rid| phone_perc| time|sleep |\n|---:|----------:|----:|:-----|\n|   1|       45.5|    1|high  |\n|   1|       40.2|    2|high  |\n|   2|       36.6|    1|low   |\n|   2|       36.2|    2|low   |\n|   3|       38.9|    1|high  |\n|   3|       39.4|    2|high  |\n:::\n:::\n\n\n:::\n\n::::\n\n## Toy Dataset Example of Join Types\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_left = left_join(\n  d1, d2,\n  by = \"rid\"\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n| rid| phone_perc| time|sleep |\n|---:|----------:|----:|:-----|\n|   1|       45.5|    1|high  |\n|   1|       40.2|    2|high  |\n|   2|       36.6|    1|low   |\n|   2|       36.2|    2|low   |\n|   3|       38.9|    1|high  |\n|   3|       39.4|    2|high  |\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_right = right_join(\n  d1, d2,\n  by = \"rid\"\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n| rid| phone_perc| time|sleep  |\n|---:|----------:|----:|:------|\n|   1|       45.5|    1|high   |\n|   1|       40.2|    2|high   |\n|   2|       36.6|    1|low    |\n|   2|       36.2|    2|low    |\n|   3|       38.9|    1|high   |\n|   3|       39.4|    2|high   |\n|   4|         NA|   NA|medium |\n:::\n:::\n\n\n:::\n\n::::\n\n## Joining Advice\n\n- Just pick one and try it; it's hard to get right on the first attempt.\n- Always check the row counts of your dataframes.\n    - You can use `nrow()` or look at the environment pane.\n    - Count the number of unique things with e.g., `length(unique(d1$rid))` or `n_distinct(d2$rid)`\n- Always specify a `by` argument, even if it is obvious\n\n::: {.callout-tip}\n## For This Project\n\n`inner_join()` is probably a good place to start.\n:::\n\n## Coming Soon\n\nI will make resources for:\n\n- regression\n- within-participant analysis\n- moderation\n- mediation\n\nLinks will appear in the modules on Canvas, and I will email you when they are there.\n\n::: {.callout-tip}\n## Schedule Meetings with Me!\n\nI am more than willing to help you through sticking points. Just email so we can find a time.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}